import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack

plugins {
    kotlin("multiplatform") version "1.6.10"
    kotlin("plugin.serialization") version "1.6.10"
    application
}

val serializationVersion = "1.3.2"
val ktorVersion = "1.6.7"
//val logbackVersion = "1.2.10"
val kvisionVersion = "5.8.3"
val reactVersion = "17.0.2-pre.299-kotlin-1.6.10"
val kmongoVersion = "4.5.0"

group = "kotlinx.coroutines.profiler"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

application {
    mainClass.set("kotlinx.profiler.show.MainKt")
}

kotlin {

    js("client") {
        println("Client")
        browser {
            binaries.executable()
        }
    }

    jvm("server") {
        withJava()

        println("Server")
        compilations {
            val main by getting {
                tasks.named<Jar>("serverJar") {
                    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

                    from(configurations.named("serverRuntimeClasspath").get()
                        .map { if (it.isDirectory) it else zipTree(it) })
                }
//                tasks.getByName<Jar>("serverJar") {
//                    from(configurations.named("serverRuntimeClasspath").get()
//                        .map { if (it.isDirectory) it else zipTree(it) })
//                    with(tasks.jar.get() as CopySpec)

//                    val taskName = if (project.hasProperty("isProduction")
//                        || project.gradle.startParameter.taskNames.contains("installDist") || true
//                    ) {
//                        "clientBrowserProductionWebpack"
//                    } else {
//                        "clientBrowserDevelopmentWebpack"
//                    }
//                    val webpackTask = getByName(taskName, KotlinWebpack::class)
////                    val webpackTask = tasks.getByName<org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack>(taskName)
//                    dependsOn(webpackTask) // make sure JS gets compiled first
//                    from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)
//                    ) // bring output file along into the JAR
//                }
            }
        }
    }

    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation(kotlin("stdlib-common"))

                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion")
                implementation("io.ktor:ktor-client-core:$ktorVersion")
            }
        }
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
            }
        }


        val serverMain by getting {
            dependencies {
                implementation("io.ktor:ktor-serialization:$ktorVersion")
                implementation("io.ktor:ktor-server-core:$ktorVersion")
                implementation("io.ktor:ktor-server-netty:$ktorVersion")
            }
        }

        val clientMain by getting {
            dependencies {
                implementation("io.ktor:ktor-client-js:$ktorVersion")
                implementation("io.ktor:ktor-client-json:$ktorVersion")
//                implementation("io.ktor:ktor-html-builder:$ktorVersion")
//                implementation("io.ktor:ktor-client-serialization:$ktorVersion")

                implementation("org.jetbrains.kotlin-wrappers:kotlin-react:$reactVersion")
                implementation("org.jetbrains.kotlin-wrappers:kotlin-react-dom:$reactVersion")

                implementation(npm("is-sorted", "1.0.5"))
                implementation(npm("d3-flame-graph", "4.1.3"))
            }
        }
    }
}

tasks.named<Jar>("serverJar") {
    val taskName = if (project.hasProperty("isProduction")
        || project.gradle.startParameter.taskNames.contains("installDist")
    ) {
        "clientBrowserProductionWebpack"
    } else {
        "clientBrowserDevelopmentWebpack"
    }
    val webpackTask = tasks.getByName<org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack>(taskName)
    dependsOn(webpackTask) // make sure JS gets compiled first
    from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
}

distributions {
    main {
        contents {
            from("$buildDir/libs") {
                rename("${rootProject.name}-server", rootProject.name)
                into("lib")
            }
        }
    }
}

tasks.named<JavaExec>("run") {
    classpath(tasks.getByName<Jar>("serverJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
}